{#=== OPTIONS ========================================================================================================#}

{% set option = {
    class:       ('form-control ' ~ field.class)|trim,
    height:      field.height|default(''),
    label:       field.label,
    info:        field.info|default(''),
    required:    field.required|default(false),
    errortext:   field.error|default(''),
    placeholder: field.placeholder|default(''),
    options:     field.options|default(''),
    templates:   field.options.templates|default([ 'title', 'teaser', 'detail' ]),
    retrieval:   field.options.retrieval|default([ 'random', 'latest', 'specified', 'highlighted' ]),
    sources:     field.options.sources|default([ 'pages', 'entries' ]),
} %}

{#=== INIT ===========================================================================================================#}
{% set currentcontent = context.content.get(contentkey)|default('') %}
{% set attributes = {
    text: {
        class:           option.class,
        data_errortext:  option.errortext,
        name:            name,
        placeholder:     option.placeholder,
        required:        option.required,
        style:           option.height ? 'height: ' ~ option.height ~ ';' : '',
    },
    hidden: {
        name:           name,
        id:             key,
        type:           'hidden',
        value:          currentcontent,
    }
} %}

{% if option.templates is iterable %}
    {% set template_values = option.templates %}
{% endif %}

{# Get the current selection. Either a single value, or an array. #}
{% set selection = currentcontent['templates']|default(option.templates[0]) %}
{% if selection is not iterable %}
    {% set selection = [ selection ] %}
{% endif %}

{# If the current selection contains an existing id, we must use _only_ the id, and not accept a fallback. #}
{% set onlyids = selection|first in template_values|keys %}

{# Build the select options array #}
{% set templates_options = [] %}
{% for id, value in template_values %}
    {% set is_array = (value is iterable and (value | length) > 1) %}
    {% set templates_options = templates_options|merge([{
        value:     id,
        text:      is_array ? value[0:]|join(' / ') : value,
        selected:  id in selection or (not onlyids and (is_array ? value[0] : value) in selection),
    }]) %}
{% endfor %}

{# Templates BUIC options #}
{% set templates_label = 'templates' %}
{% set templates_opt_select = {
    'all':       0,
    'clear':     false,
    'id':        key ~ '[' ~ templates_label ~ ']',
    'multiple':  0,
    'name':      templates_label,
    'options':   templates_options,
    'required':  true,
} %}


{#=== FIELDSET =======================================================================================================#}

{% extends '@bolt/_base/_fieldset.twig' %}

{% block fieldset_type 'viewblocks' %}
{% block fieldset_widget 'fieldViewBlocks' %}

{% block fieldset_label_text  labelkey %}
{% block fieldset_label_info  option.info %}
{% block fieldset_label_class 'col-xs-12 control-label' %}

{% block fieldset_controls %}
    <div class="col-xs-12">
        <pre{{ macro.attr(attributes.text) }}>{{ currentcontent }}</pre>
        <input{{ macro.attr(attributes.hidden) }}>
    </div>
    <div class="col-xs-12">
        {% from '@bolt/_buic/_select.twig' import buic_select %}
        <label class="col-sm-3">Template</label>
        <div class="col-sm-9">
            {{ buic_select( templates_opt_select ) }}
        </div>
    </div>
{% endblock fieldset_controls %}

